{
    "code snippets": [
        {
            "code body": "\nSystem.out.println(\"Hi\")\n",
            "title": "Say Hi",
            "coding language": "Java"
        },
        {
            "code body": "\npackage model;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Represents a set of integers\npublic class IntegerSet {\n  private List<Integer> data;\n\n  // EFFECTS: set is empty\n  public IntegerSet() {\n    data = new ArrayList<>();\n  }\n\n  // MODIFIES: this\n  // EFFECTS: Integer i is added to the IntegerSet if it's not\n  // already in the IntegerSet\n  public void insert(Integer i) {\n    if (!contains(i))\n      data.add(i);\n  }\n\n  // REQUIRES: Integer i is an element of the IntegerSet\n  // MODIFIES: this\n  // EFFECTS: Integer i is removed from the IntegerSet\n  public void remove(Integer i) {\n    data.remove(i);\n  }\n\n  // EFFECTS: Returns true if Integer i is in the IntegerSet\n  // and false otherwise\n  public boolean contains(Integer i) {\n    return data.contains(i);\n  }\n\n  // EFFECTS: Returns the number of items in the set\n  public int size() {\n    return data.size();\n  }\n}\n",
            "title": "Integer Set",
            "coding language": "Java"
        },
        {
            "code body": "\nfrom turtle import *\n\nspeed(0)\n\n# Grass\nbgcolor(\"green\")\n\n# Sky\npenup()\ngoto(-400, -100)\npendown()\ncolor(\"deepskyblue\")\nbegin_fill()\nfor i in range(2):\n    forward(800)\n    left(90)\n    forward(500)\n    left(90)\nend_fill()\n\n# Sun\npenup()\ngoto(-320, 225)\npendown()\ncolor(\"yellow\")\nbegin_fill()\ncircle(35)\nend_fill()\n\n# Cloud\npenup()\ngoto(200, 200)\npendown()\ncolor(\"white\")\nbegin_fill()\ncircle(25)\nend_fill()\n\npenup()\ngoto(220, 240)\npendown()\nbegin_fill()\ncircle(25)\nend_fill()\n\npenup()\ngoto(230, 215)\npendown()\nbegin_fill()\ncircle(25)\nend_fill()\n\npenup()\ngoto(180, 225)\npendown()\nbegin_fill()\ncircle(25)\nend_fill()\n\n# House\npenup()\ngoto(-100, -100)\npendown()\npensize(3)\ncolor(\"chocolate\", \"orange\") # (stroke, fill)\nbegin_fill()\nfor i in range(4):\n    forward(170)\n    left(90)\nend_fill()\n\n# Chimney\npenup()\ngoto(20, 130)\npendown()\ncolor(\"brown\", \"firebrick\")\nbegin_fill()\nfor i in range(2):\n    forward(40)\n    left(90)\n    forward(100)\n    left(90)\nend_fill()\n\n# Roof\npenup()\ngoto(-127, 70)\npendown()\nbegin_fill()\nfor i in range(3):\n    forward(225)\n    left(120)\nend_fill()\n\n# Window 1\npenup()\ngoto(0, 0)\npendown()\ncolor(\"black\", \"white\")\nbegin_fill()\nfor i in range(4):\n    forward(50)\n    left(90)\nend_fill()\n\n# Window 1 Cross - Horizontal Line \npenup()\ngoto(0, 25)\npendown()\ncolor(\"black\")\nforward(50)\n\n# Window 1 Cross - Vertical Line \npenup()\ngoto(25, 0)\npendown()\nleft(90)\nforward(50)\n\n# Window 2\npenup()\ngoto(-80, 0)\npendown()\nright(90)\ncolor(\"black\", \"white\")\nbegin_fill()\nfor i in range(4):\n    forward(50)\n    left(90)\nend_fill()\n\n# Window 2 Cross - Horizontal Line \npenup()\ngoto(-80, 25)\npendown()\ncolor(\"black\")\nforward(50)\n\n# Window 2 Cross - Vertical Line \npenup()\ngoto(-55, 0)\npendown()\nleft(90)\nforward(50)\n\n# Door\npenup()\ngoto(-40, -97)\npendown()\nright(90)\ncolor(\"red\")\nbegin_fill()\nfor i in range(2):\n    forward(50)\n    left(90)\n    forward(80)\n    left(90)\nend_fill()\n\n# Door Handle\npenup()\ngoto(-30, -60)\npendown()\ncolor(\"black\")\nbegin_fill()\ncircle(5)\nend_fill()\n\nhideturtle()\nexitonclick()\n",
            "title": "House Drawing",
            "coding language": "Python"
        },
        {
            "code body": "\n    // MODIFIES: this\n    // EFFECTS: Processes user input from the menu\n    private void Menu() {\n        String command;\n        boolean stayOnCurrentMenu = true;\n        while (stayOnCurrentMenu) {\n            displayMenu();\n            command = input.next();\n            command = command.toLowerCase();\n\n            if (command.equals(\"x\")) {\n                stayOnCurrentMenu = false;\n            } else {\n                processMenuCommands(command);\n            }\n        }\n    }\n\n    // EFFECTS: Displays menu of main options to user\n    private void displayMenu() {\n        System.out.println(\"\\nSelect from:\");\n        System.out.println(\"Option 1: \");\n        System.out.println(\"Option 2: \");\n        System.out.println(\"a ->  \");\n        System.out.println(\"b ->  \");\n        System.out.println(\"q -> quit\");\n    }\n\n    // MODIFIES: this\n    // EFFECTS: Processes user commands menu\n    private void processMenuCommands(String command) {\n        switch (command) {\n            case \"a\":\n                methodA();\n                break;\n            case \"b\":\n                methodB();\n                break;\n            default:\n                System.out.println(\"Selection not valid...\");\n                break;\n        }\n    }\n",
            "title": "Menu",
            "coding language": "Java"
        },
        {
            "code body": "\nThis is the coolest house drawing.\nIt's cooler than the other house drawing.\n",
            "title": "Coolest House Drawing",
            "coding language": "Woof!"
        },
        {
            "code body": "\n# Importing the turtle module\nimport turtle\n\n\n# Defining a function that gives a title\ndef title(drawing_title):\n    jen.penup()\n    jen.goto(-425, 200)\n    jen.write(drawing_title, font=(\"Times New Roman\", 80, \"bold\"))\n    jen.ht()\n\n\n# Defining a function to draw a rectangle\ndef draw_a_rectangle(horizontal_len, vertical_len):\n    for i in range(2):\n        alex.begin_fill()\n        alex.forward(horizontal_len)\n        alex.left(90)\n        alex.forward(vertical_len)\n        alex.left(90)\n        alex.end_fill()\n    alex.ht()\n\n\n# Defining a function to draw cookie\ndef draw_cookie(x_offset, y_offset):\n    jim.fillcolor(\"gold\")\n    jim.penup()\n    jim.goto(0+x_offset, 0 + y_offset)\n    jim.pendown()\n    jim.begin_fill()\n    jim.circle(30)\n    jim.end_fill()\n    jim.up()\n    jim.fillcolor(\"black\")\n    jim.goto(-5 + x_offset, 20 + y_offset)\n    jim.stamp()\n    jim.goto(-5 + x_offset, 40 + y_offset)\n    jim.stamp()\n    jim.goto(5 + x_offset, 30 + y_offset)\n    jim.stamp()\n    jim.goto(15 + x_offset, 20 + y_offset)\n    jim.stamp()\n    jim.goto(15 + x_offset, 40 + y_offset)\n    jim.stamp()\n\n# Create a light blue background\nwn = turtle.Screen()\nwn.bgcolor(\"light blue\")\n\n# Creating all the turtles that I need\n# Giving them the necessary attributes\n# Setting all of them to max speed\njen = turtle.Turtle()\njen.speed(0)\n\nalex = turtle.Turtle()\nalex.speed(0)\nalex.pensize(1)\n\njim = turtle.Turtle()\njim.color(\"black\")\njim.fillcolor(\"gold\")\njim.speed(0)\njim.pensize(2)\n\n# Writing a title by calling the title function\ntitle(\"Cookies and Milk!\")\n\n# Setting the initial position for drawing a table\nalex.up()\nalex.goto(-1000, -500)\nalex.down()\n\n# Calling the draw_a_rectangle function to draw a table\nalex.fillcolor(\"brown\")\ndraw_a_rectangle(2000, 400)\n\n# Setting the starting point of the drawing of cookies\nx = -360\ny = -200\n\n# Drawing cookies.\nfor cookie in range(28):\n    draw_cookie(x, y)\n    x += 60\n    if x == 60:\n        y -= 60\n        x = -360\ndraw_cookie(150, -75)\n\n# Setting the initial position for drawing a glass of milk\nalex.up()\nalex.goto(100, -250)\nalex.down()\n\n# Calling the draw_a_rectangle function to draw a glass of milk\nalex.fillcolor(\"white\")\ndraw_a_rectangle(100, 200)\n",
            "title": "Cookies and Milk",
            "coding language": "Python"
        }
    ],
    "name": "MyCodeBank"
}